name: Build after Trigger

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
         dotnet-version: '6.0.x'

      - name: check for changes
        id: check_changes
        run: |
           git clone https://github.com/alon3896/triger_demo.git
           cd triger_demo
           latest_commit=$(git rev-parse HEAD)
           echo "latest_commit=${latest_commit}" >> $GITHUB_ENV
      - name: get the last known commit
        id: get_last_commit
        run: echo "last_commit=$(cat last_commit.txt || echo 'none')" >> $GITHUB_ENV
        continue-on-error: true

      - name: compare commits
        id: compare
        run: |
          if [ "${{ env.last_commit }}" != "${{ env.latest_commit }}" ]; then
            echo "commits_are_different=true" >> $GITHUB_ENV
          else
            echo "commits_are_different=false" >> $GITHUB_ENV
          fi

          
    

      - name: save last commit
        if: env.commits_are_different == 'true'
        run: |
         echo "${{ env.latest_commit }}" > last_commit.txt
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          git add last_commit.txt
          git commit -m "feat:Update last known commit"
          git remote set-url origin https://x-access-token:${{secrets.AFIMILK}}@github.com/alon3896/HomeAssignment.git
          git push



      - name: Create a new version
        if: env.commits_are_different == 'true'
        id: create_version
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "$latest_tag"
          if [ "$latest_tag" == "" ] || [ "$latest_tag" == "V" ] || [ "$latest_tag" == "v" ]; then
            initial_version="1.0.0"
            semver=( ${initial_version//./ } )
            major="${semver[0]}"
            minor="${semver[1]}"
            patch="${semver[2]}"
            patch=$((patch + 1))  # Ensure patch is correctly initialized and incremented
            new_version="v$major.$minor.$patch"
          else
            current_version=$(echo $latest_tag | cut -c 2-)
            semver=( ${current_version//./ } )
            major="${semver[0]}"
            minor="${semver[1]}"
            patch="${semver[2]}"
            patch=$((patch + 1))  # Ensure patch is correctly initialized and incremented
            new_version="v$major.$minor.$patch"
          fi
          echo "VERSION=${new_version}" >> $GITHUB_ENV
          
      - name: Debug VERSION
        if: env.commits_are_different == 'true'
        run: echo "VERSION=${{ env.VERSION }}"
        
      - name: Strip 'v' prefix from VERSION
        id: strip_version
        run: |
          echo "Original version: $VERSION"
          pv=$(echo $VERSION | sed 's/^v//')
          echo "Stripped version: $pv"
          echo "PACKAGE_VERSION=${pv}" >> $GITHUB_ENV      
          
      - name: Build and package
        if: env.commits_are_different == 'true'
        run: |
          cd src
          dotnet restore /p:PackageVersion=${{ env.PACKAGE_VERSION }}
          dotnet build --configuration Release /p:PackageVersion=${{ env.PACKAGE_VERSION }}
          echo "pacVERSION=${{env.PACKAGE_VERSION }}"
          dotnet pack --configuration Release --output ./nuget /p:PackageVersion=${{ env.PACKAGE_VERSION }} /p:IncludeSymbols=false /p:SymbolPackageFormat=snupkg

          ls -l ./nuget

      - name: List published files
        if: env.commits_are_different == 'true'
        run: |
          ls -l ./src/InterviewTask/bin/Release/net8.0/
          ls -l ./src/nuget/
          
      - name: Copy files to release directory
        if: env.commits_are_different == 'true'
        run: |
          mkdir -p ${{ github.workspace }}/release_files
          cp ./src/InterviewTask/bin/Release/net8.0/InterviewTask.dll ${{ github.workspace }}/release_files/
          cp ./src/nuget/InterviewTask.1.0.0.nupkg ${{ github.workspace }}/release_files/
          



      - name: Create GitHub Release
        if: env.commits_are_different == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AFIMILK }}
        with:
          tag_name: ${{ env.VERSION }}  # Ensure this is correctly formatted, e.g., 'v${{ env.VERSION }}'
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload NuGet package
        if: env.commits_are_different == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:  ${{ secrets.AFIMILK }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/HomeAssignment/HomeAssignment/src/nuget/InterviewTask.1.0.0.nupkg
          asset_name: InterviewTask.${{ env.VERSION }}.nupkg
          asset_content_type: application/octet-stream

      - name: Upload DLL
        if: env.commits_are_different == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:  ${{ secrets.AFIMILK }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/release_files/InterviewTask.dll
          asset_name: InterviewTask.${{ env.VERSION }}.dll
          asset_content_type: application/octet-stream

   
