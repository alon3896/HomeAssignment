name: Build after Trigger

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
         dotnet-version: '6.0.x'

      - name: check for changes
        id: check_changes
        run: |
           git clone https://github.com/alon3896/triger_demo.git
           cd triger_demo
           latest_commit=$(git rev-parse HEAD)
           echo "latest_commit=${latest_commit}" >> $GITHUB_ENV

      - name: get the last known commit
        id: get_last_commit
        run: echo "last_commit=$(cat last_commit.txt || echo 'none')" >> $GITHUB_ENV
        continue-on-error: true

      - name: compare commits
        id: compare
        run: |
          if [ "${{ env.last_commit }}" != "${{ env.latest_commit }}" ]; then
            echo "commits_are_different=true" >> $GITHUB_ENV
          else
            echo "commits_are_different=false" >> $GITHUB_ENV
          fi
      - name: save last commit
        if: env.commits_are_different == 'true'
        run: echo "${{ env.latest_commit }}" > last_commit.txt
      - name: Build and package
        if: env.commits_are_different == 'true'
        run: |
          cd src
          dotnet restore
          dotnet build --configuration Release
          dotnet pack --configuration Release --output ./nuget

      

      - name: Create a new version
        if: env.commits_are_different == 'true'
        id: create_version
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          if [ "$latest_tag" == "" ]; then
            initial_version="1.0.0"
          else
            current_version=$(echo $latest_tag | cut -c 2-)
            semver=( ${current_version//./ } )
            major="${semver[0]}"
            minor="${semver[1]}"
            patch="${semver[2]}"
            patch=$((patch + 1))  # Ensure patch is correctly initialized and incremented
            new_version="v$major.$minor.$patch"
          fi
          echo "VERSION=${new_version}" >> $GITHUB_ENV


      - name: Debug VERSION
        if: env.commits_are_different == 'true'
        run: echo "VERSION=${{ env.VERSION }}"

      - name: Create GitHub Release
        if: env.commits_are_different == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AFIMILK }}
        with:
          tag_name: ${{ env.VERSION }}  # Ensure this is correctly formatted, e.g., 'v${{ env.VERSION }}'
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload NuGet package
        if: env.commits_are_different == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:  ${{ secrets.AFIMILK }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./nuget/HomeAssignment.*.nupkg
          asset_name: HomeAssignment.${{ steps.get_version.outputs.version }}.nupkg
          asset_content_type: application/octet-stream
